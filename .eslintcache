[{"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\index.js":"1","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\App.js":"2","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\reportWebVitals.js":"3","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\routes\\Routes.js":"4","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\helpers\\history.js":"5","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\constants\\routesConstant.js":"6","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\dashboard\\Dashboard.js":"7","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\navbar\\Navbar.js":"8","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\restaurant\\RestaurantDashboard.js":"9","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\footer\\Footer.js":"10","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\routes\\PageNotFound.js":"11","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\constants\\icons.js":"12","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\restaurant\\RestaurantList.js":"13","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\constants\\commonConstants.js":"14","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\sharedComponent\\TablePaginationAction.js":"15","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\store\\index.js":"16","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\reducers\\index.js":"17","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\reducers\\restaurant.reducer.js":"18","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\constants\\reducerConstants.js":"19","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\restaurant\\RestaurantModalForm.js":"20","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\sharedComponent\\AdvancePhoneNumber.js":"21","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\sharedComponent\\ModalCloseHelper.js":"22","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\containers\\restaurantModalContainer.js":"23","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\action\\index.js":"24","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\action\\restaurant.action.js":"25","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\constants\\notificationMessages.js":"26","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\sharedComponent\\Snackbar.js":"27","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\containers\\restaurantListContainer.js":"28","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\containers\\restaurantDetailsContainer.js":"29","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\helpers\\sharedMethod.js":"30","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\restaurant\\restaurantDetails\\RestaurantDetailsView.js":"31","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\restaurant\\restaurantDetails\\RestaurantDetailsAdmin.js":"32","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\restaurant\\restaurantDetails\\MenuItemForm.js":"33","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\containers\\menuItemFormContainer.js":"34","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\restaurant\\restaurantDetails\\MenuItemListView.js":"35","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\restaurant\\restaurantPreview\\RestaurantPreview.js":"36"},{"size":620,"mtime":1610525086697,"results":"37","hashOfConfig":"38"},{"size":141,"mtime":1610271591706,"results":"39","hashOfConfig":"38"},{"size":362,"mtime":499162500000,"results":"40","hashOfConfig":"38"},{"size":594,"mtime":1610524584838,"results":"41","hashOfConfig":"38"},{"size":135,"mtime":1610524914677,"results":"42","hashOfConfig":"38"},{"size":207,"mtime":1610524581281,"results":"43","hashOfConfig":"38"},{"size":1292,"mtime":1610524591392,"results":"44","hashOfConfig":"38"},{"size":1269,"mtime":1610272567652,"results":"45","hashOfConfig":"38"},{"size":8173,"mtime":1610456411514,"results":"46","hashOfConfig":"38"},{"size":402,"mtime":1610275142168,"results":"47","hashOfConfig":"38"},{"size":1027,"mtime":1610272327587,"results":"48","hashOfConfig":"38"},{"size":19272,"mtime":1610269334459,"results":"49","hashOfConfig":"38"},{"size":9132,"mtime":1610538221916,"results":"50","hashOfConfig":"38"},{"size":29240,"mtime":1610527633965,"results":"51","hashOfConfig":"38"},{"size":2430,"mtime":1610279962705,"results":"52","hashOfConfig":"38"},{"size":403,"mtime":1610366329367,"results":"53","hashOfConfig":"38"},{"size":159,"mtime":1610290152571,"results":"54","hashOfConfig":"38"},{"size":750,"mtime":1610506813741,"results":"55","hashOfConfig":"38"},{"size":110,"mtime":1610290816721,"results":"56","hashOfConfig":"38"},{"size":30691,"mtime":1610538853667,"results":"57","hashOfConfig":"38"},{"size":514,"mtime":1610538850631,"results":"58","hashOfConfig":"38"},{"size":1010,"mtime":1610270355623,"results":"59","hashOfConfig":"38"},{"size":738,"mtime":1610457033756,"results":"60","hashOfConfig":"38"},{"size":110,"mtime":1610298393758,"results":"61","hashOfConfig":"38"},{"size":5346,"mtime":1610538853675,"results":"62","hashOfConfig":"38"},{"size":669,"mtime":1610520777873,"results":"63","hashOfConfig":"38"},{"size":1128,"mtime":1610270349627,"results":"64","hashOfConfig":"38"},{"size":405,"mtime":1610466500431,"results":"65","hashOfConfig":"38"},{"size":849,"mtime":1610518867507,"results":"66","hashOfConfig":"38"},{"size":760,"mtime":1610516895708,"results":"67","hashOfConfig":"38"},{"size":3832,"mtime":1610515532824,"results":"68","hashOfConfig":"38"},{"size":5841,"mtime":1610537067911,"results":"69","hashOfConfig":"38"},{"size":8405,"mtime":1610538853624,"results":"70","hashOfConfig":"38"},{"size":473,"mtime":1610506528704,"results":"71","hashOfConfig":"38"},{"size":2633,"mtime":1610538019680,"results":"72","hashOfConfig":"38"},{"size":3901,"mtime":1610537437064,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"fugrtb",{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"78"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"78"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"78"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"78"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"78"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"78"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"78"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"78"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\index.js",[],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\App.js",[],["155","156"],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\reportWebVitals.js",[],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\routes\\Routes.js",[],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\helpers\\history.js",[],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\constants\\routesConstant.js",[],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\dashboard\\Dashboard.js",["157","158","159"],"import React, { useEffect } from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport { ROUTES } from '../../constants/routesConstant';\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport Footer from '../footer/Footer';\r\nimport Navbar from '../navbar/Navbar';\r\nimport history from '../../helpers/history';\r\nimport RestaurantDashboard from '../restaurant/RestaurantDashboard';\r\nimport RestaurantDetailsContainer from '../../containers/restaurantDetailsContainer';\r\nimport './dashboard.css';\r\nimport PageNotFound from '../routes/PageNotFound';\r\n\r\nconst Dashboard = (props) => {\r\n\r\n    return (\r\n        <div className=\"mainContainer\">\r\n            <Navbar />\r\n            <div className=\"dashboardBox\">\r\n                <Container maxWidth=\"xl\" className=\"dashboardContainer\" >\r\n                    <Switch>\r\n                        <Route exact path={ROUTES.RESTAURANT_DASHBOARD} component={RestaurantDashboard} />\r\n                        <Route path={`${ROUTES.RESTAURANT_DETAILS}/:restaurantId`} component={RestaurantDetailsContainer} />\r\n                        {/* <Route component={PageNotFound} /> */}\r\n                    </Switch>\r\n                </Container>\r\n            </div>\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\navbar\\Navbar.js",[],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\restaurant\\RestaurantDashboard.js",["160","161","162","163","164","165","166","167"],"import React, { useRef } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { IconButton } from '@material-ui/core';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport { restaurantColumn } from '../../constants/commonConstants';\r\nimport RestaurantListContainer from '../../containers/restaurantListContainer';\r\nimport SnackbarAlert from '../sharedComponent/Snackbar';\r\nimport RestaurantModalContainer from '../../containers/restaurantModalContainer';\r\nimport './restaurantDashboard.css';\r\n\r\nconst RestaurantDashboard = (props) => {\r\n    const [searchInput, setSearchInput] = React.useState('');\r\n    const [showRestaurantModal, setShowRestaurantModal] = React.useState(false);\r\n    const [displayRestaurantList, setDisplayRestaurantList] = React.useState([]);\r\n    const [restaurantColumnListView, setRestaurantColumnListView] = React.useState(false);\r\n    const [restaurantListAnchorEl, setRestaurantListAchorEl] = React.useState(null);\r\n    const [restaurantColumnList, setRestaurantColumnList] = React.useState(restaurantColumn);\r\n    const [editRestaurant, setEditRestaurant] = React.useState(false);\r\n    const [selectedRestaurant, setSelectedRestaurant] = React.useState({});\r\n    const [snackbar, setSnackbar] = React.useState({\r\n        open: false,\r\n        type: '',\r\n        message: ''\r\n    })\r\n    let wrapperRef = useRef(null);\r\n    let eleRef = useRef(null);\r\n\r\n    const handleRestaurantColumntListView = (e) => {\r\n        setRestaurantColumnListView(!restaurantColumnListView);\r\n        setRestaurantListAchorEl(restaurantColumnListView ? null : e.currentTarget);\r\n    }\r\n\r\n    const handleChangeRestaurantListColumn = (object) => {\r\n        let tempRestaurantColumnList = restaurantColumnList;\r\n        let newRestaurantColumns = tempRestaurantColumnList.map(column => {\r\n            if (column.name === object.name) {\r\n                column.show = !object.show\r\n            }\r\n            return column;\r\n        });\r\n        setRestaurantColumnList(newRestaurantColumns);\r\n    }\r\n\r\n    const handleRestaurantColumnFilter = () => {\r\n        return restaurantColumnList.map(column => {\r\n\r\n            return (\r\n                <div className=\"productColumnItem\" key={column.id}>\r\n                    <Checkbox checked={column.show} onChange={(e) => handleChangeRestaurantListColumn(column)}\r\n                        icon={<CheckBoxOutlineBlankIcon />} checkedIcon={<CheckBoxIcon />}\r\n                        label={column.name} name=\"checkedH\" />\r\n                    <p>{column.name}</p>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    const setElementRef = (node) => {\r\n        eleRef = node;\r\n    }\r\n\r\n    const handleOpenRestaurantModalForm = () => {\r\n        setShowRestaurantModal(!showRestaurantModal);\r\n        setEditRestaurant(false);\r\n        setSelectedRestaurant({});\r\n    }\r\n\r\n    const handleTableSearchResult = (e) => {\r\n\r\n    }\r\n\r\n    const handleClose = (e) => {\r\n        if (eleRef && !eleRef.contains(e.target)) {\r\n            setRestaurantColumnListView(!restaurantColumnListView);\r\n            setRestaurantListAchorEl(null);\r\n        }\r\n    }\r\n\r\n    const handleNotification = (close, type, message) => {\r\n        let snackbar = {};\r\n        if (close) {\r\n            snackbar = {\r\n                open: false,\r\n                type: '',\r\n                message: ''\r\n            }\r\n        } else {\r\n            snackbar = {\r\n                open: true,\r\n                type: type,\r\n                message: message\r\n            }\r\n\r\n        }\r\n\r\n        setSnackbar({ ...snackbar });\r\n    }\r\n\r\n    const editRestaurantDetails = (data) => {\r\n        setSelectedRestaurant(data);\r\n        setShowRestaurantModal(true);\r\n        setEditRestaurant(true);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {showRestaurantModal ?\r\n                <RestaurantModalContainer\r\n                    modalView={showRestaurantModal}\r\n                    modalClose={handleOpenRestaurantModalForm}\r\n                    handleNotification={handleNotification}\r\n                    editRestaurant={editRestaurant}\r\n                    selectedRestaurant={selectedRestaurant}\r\n                /> : ''\r\n            }\r\n            {snackbar.open ?\r\n                <SnackbarAlert\r\n                    snackbar={snackbar}\r\n                    handleShowNotification={handleNotification}\r\n                >\r\n                </SnackbarAlert> : ''\r\n            }\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={10} className=\"orderDashboard\">\r\n                    <h2>Restaurants</h2>\r\n                </Grid>\r\n                <Grid item xs={2} className=\"orderDropdown customerDropdown\">\r\n                    <Button variant=\"outlined\" onClick={handleOpenRestaurantModalForm}>\r\n                        Add Restaurant\r\n                </Button>\r\n                </Grid>\r\n                {/* <Grid item xs={12} className=\"orderFilters\">\r\n                    <div className=\"orderFilterSearch\">\r\n                        <IconButton aria-label=\"menu\" className=\"searchIcon\">\r\n                            <SearchIcon />\r\n                        </IconButton>\r\n                        <InputBase className=\"searchBar\"\r\n                            placeholder=\"Search Restaurant\"\r\n                            value={searchInput}\r\n                            onChange={e => handleTableSearchResult(e)}\r\n                        />\r\n                    </div>\r\n                </Grid> */}\r\n                <Grid item xs={12} className=\"productListColumnList\">\r\n                    <p onClick={handleRestaurantColumntListView} aria-describedby='simple-popover'>Customise Columns</p>\r\n                </Grid>\r\n                <Grid item xs={12} className=\"orderHistoryTableContainer\">\r\n                    {restaurantColumnListView &&\r\n                        <Popover\r\n                            ref={wrapperRef}\r\n                            id='simple-popover'\r\n                            open={restaurantColumnListView}\r\n                            anchorEl={restaurantListAnchorEl}\r\n                            onClose={handleRestaurantColumntListView}\r\n                            onClick={handleClose}\r\n                            anchorOrigin={{\r\n                                vertical: 'bottom',\r\n                                horizontal: 'center',\r\n                            }}\r\n                            transformOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'center',\r\n                            }}\r\n                        >\r\n                            <div className=\"productColumnListContainer\" ref={setElementRef}>\r\n                                <div className=\"productColumnListHeader\">\r\n                                    <Grid item xs={11} className=\"listOfColumnHeader\">\r\n                                        List Of Columns\r\n                                        </Grid>\r\n                                    <Grid item xs={1}>\r\n                                        <CloseIcon onClick={handleRestaurantColumntListView} />\r\n                                    </Grid>\r\n                                </div>\r\n                                <div className=\"productColumnListCheckbox\">\r\n                                    {handleRestaurantColumnFilter()}\r\n                                </div>\r\n                            </div>\r\n                        </Popover>\r\n                    }\r\n                    <RestaurantListContainer\r\n                        restaurantColumn={restaurantColumnList}\r\n                        editRestaurantDetails={editRestaurantDetails}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RestaurantDashboard;","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\footer\\Footer.js",[],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\routes\\PageNotFound.js",[],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\constants\\icons.js",[],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\restaurant\\RestaurantList.js",["168"],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\constants\\commonConstants.js",["169"],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\sharedComponent\\TablePaginationAction.js",[],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\store\\index.js",[],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\reducers\\index.js",[],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\reducers\\restaurant.reducer.js",[],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\constants\\reducerConstants.js",[],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\restaurant\\RestaurantModalForm.js",["170"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Button from '@material-ui/core/Button';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ModalCloseHelper from '../sharedComponent/ModalCloseHelper';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport AdvancePhoneNumber from '../sharedComponent/AdvancePhoneNumber';\r\nimport './restaurantModalForm.css';\r\nimport { emailRegexExpression } from '../../constants/commonConstants';\r\nimport { MessageType } from '../../constants/notificationMessages';\r\n\r\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\n\r\nconst RestaurantModalForm = (props) => {\r\n    const wrapperRef = useRef(null);\r\n    const modalRef = useRef(null);\r\n    const [restaurantForm, setRestaurantForm] = useState({\r\n        name: '',\r\n        cuisines: [],\r\n        rating: 0,\r\n        address1: '',\r\n        address2: '',\r\n        city: '',\r\n        state: '',\r\n        country: '',\r\n        postalCode: '',\r\n        averageCost: '',\r\n        email: '',\r\n        phoneNumber: '',\r\n        description: '',\r\n        bar: false,\r\n        buffet: false,\r\n        dining: false,\r\n        pureVeg: false,\r\n        petFriendly: false,\r\n        outdoorSitting: false\r\n    })\r\n    const showModal = props.modalView;\r\n    const closeModal = () => {\r\n        if (showModal) {\r\n            props.modalClose();\r\n        }\r\n    }\r\n\r\n    const handleCheckboxChange = (e, type) => {\r\n        setRestaurantForm({\r\n            ...restaurantForm,\r\n            [type]: e.target.checked\r\n        })\r\n    }\r\n\r\n    const handleInputChange = (e, type, country) => {\r\n        let tempRestaurantForm = { ...restaurantForm };\r\n        let value = type === 'phoneNumber' ? e : e.target.value;\r\n        if ((type !== 'phoneNumber' && e.target.value === ' ') || e === ' ') {\r\n            return;\r\n        }\r\n        tempRestaurantForm[type] = value;\r\n        if (type === 'phoneNumber') {\r\n            tempRestaurantForm.phoneCountry = country;\r\n        }\r\n\r\n        let result = handleTextValidation(type, value, tempRestaurantForm, false, tempRestaurantForm.phoneCountry);\r\n\r\n        tempRestaurantForm = result[1];\r\n        setRestaurantForm({\r\n            ...tempRestaurantForm\r\n        });\r\n    }\r\n\r\n    const handleTextValidation = (key, value, tempRestaurantForm, submited, country) => {\r\n        let valid = false;\r\n        if (submited && value === '') {\r\n            valid = false;\r\n            tempRestaurantForm = {\r\n                ...tempRestaurantForm,\r\n                [`${key}Error`]: `${key.split(/(?=[A-Z])/).join(\" \")} Required`.replace(\"Id\", \" \")\r\n            }\r\n        } else {\r\n            valid = true;\r\n            tempRestaurantForm = {\r\n                ...tempRestaurantForm,\r\n                [`${key}Error`]: ''\r\n            }\r\n        }\r\n        if (key === 'phoneNumber' && value !== '') {\r\n            let phNumber = value;\r\n            let countryCode = country.dialCode;\r\n            phNumber = phNumber.replace(/[^0-9]/g, '');\r\n            phNumber = phNumber.replace(countryCode, '');\r\n            if (phNumber.length < 10 || phNumber.length >= 11) {\r\n                valid = false;\r\n                tempRestaurantForm.phoneNumberError = 'Phone Number is not valid';\r\n            }\r\n        }\r\n        if ((key === 'name') && value !== '') {\r\n            if (value.length < 1 || value.length > 30) {\r\n                valid = false;\r\n                tempRestaurantForm[`${key}Error`] = `${key} must be between 4 to 20 characters`;\r\n            }\r\n        }\r\n        if ((key === 'address1') && value !== '') {\r\n            if (value.length < 1 || value.length > 30) {\r\n                valid = false;\r\n                tempRestaurantForm[`${key}Error`] = `${key} must be between 5 to 50 character`;\r\n            }\r\n        }\r\n        if (key === 'address2' && value !== '') {\r\n            if (value.length < 1 || value.length > 50) {\r\n                valid = false;\r\n                tempRestaurantForm[`${key}Error`] = `${key} must be between 5 to 50 character`;\r\n            } else {\r\n                valid = true;\r\n                tempRestaurantForm[`${key}Error`] = ``;\r\n            }\r\n        }\r\n        if (key === 'city' && value !== '') {\r\n            if (value.length < 1 || value.length > 30) {\r\n                valid = false;\r\n                tempRestaurantForm[`${key}Error`] = `${key} must be between 3 to 50 character`;\r\n            }\r\n        }\r\n        if (key === 'email' && value !== '') {\r\n            let res = emailRegexExpression;\r\n            if (!res.test(value)) {\r\n                valid = false;\r\n                tempRestaurantForm = {\r\n                    ...tempRestaurantForm,\r\n                    emailError: 'Proper Email Required'\r\n                }\r\n            }\r\n        }\r\n        if ((key === 'province' && value === '') || key === 'state') {\r\n            if (value.length <= 0) {\r\n                valid = false;\r\n                tempRestaurantForm.stateError = 'State/Province is required';\r\n            } else if (value.length < 1 || value.length > 30) {\r\n                valid = false;\r\n                tempRestaurantForm.stateError = 'State/Province mudt between 5 to 50 character';\r\n            }\r\n        }\r\n        return [valid, tempRestaurantForm];\r\n    }\r\n\r\n    const handleCusisineSelectChange = (e, value) => {\r\n        let tempRestaurantForm = { ...restaurantForm }\r\n        let cuisinesId = [];\r\n        let cuisines = [];\r\n        if (value.length > 0) {\r\n            value.map(val => {\r\n                cuisinesId.push(val.cuisineId);\r\n                cuisines.push(val)\r\n                return val;\r\n            })\r\n        }\r\n        tempRestaurantForm.cuisineId = cuisinesId;\r\n        tempRestaurantForm.cuisines = cuisines;\r\n\r\n        let result = handleDropDownValidation('cuisineId', tempRestaurantForm.cuisineId, tempRestaurantForm, false);\r\n        tempRestaurantForm = result[1];\r\n        setRestaurantForm({\r\n            ...tempRestaurantForm\r\n        });\r\n    }\r\n\r\n    const handleDropDownValidation = (key, value, tempRestaurantForm, submited) => {\r\n        let valid = false;\r\n        if (key === 'country') {\r\n            if (!value) {\r\n                valid = false;\r\n                tempRestaurantForm.countryError = 'country required'\r\n            } else {\r\n                valid = true;\r\n                tempRestaurantForm.countryError = ''\r\n            }\r\n        }\r\n\r\n        return [valid, tempRestaurantForm];\r\n    }\r\n\r\n    const handleNumericInputChange = (e, type) => {\r\n        let tempRestaurantForm = { ...restaurantForm };\r\n        let value = parseInt(e.target.value);\r\n        if ((type === 'postalCode' || type === 'rating') && isNaN(e.target.value)) {\r\n            return;\r\n        }\r\n        if (type === 'rating' && e.target.value > 5) {\r\n            return;\r\n        }\r\n        tempRestaurantForm[type] = e.target.value;\r\n        let result = handleNumericValidation(type, parseInt(value), tempRestaurantForm, false)\r\n        tempRestaurantForm = result[1];\r\n\r\n        setRestaurantForm({\r\n            ...tempRestaurantForm\r\n        });\r\n    }\r\n\r\n    const handleNumericValidation = (key, value, tempRestaurantForm, submited) => {\r\n        let valid = false;\r\n        if (submited && (!parseInt(value) || parseInt(value) <= 0)) {\r\n            valid = false;\r\n            tempRestaurantForm = {\r\n                ...tempRestaurantForm,\r\n                [`${key}Error`]: `${key.split(/(?=[A-Z])/).join(\" \")} Required`.replace(\"Id\", \" \")\r\n            }\r\n        } else if (!parseInt(value) || parseInt(value) <= 0) {\r\n            valid = false;\r\n            tempRestaurantForm = {\r\n                ...tempRestaurantForm,\r\n                [`${key}Error`]: key === 'PostalCode' ? '' : `Should be greater than 0`\r\n            }\r\n        } else {\r\n            valid = true;\r\n            tempRestaurantForm = {\r\n                ...tempRestaurantForm,\r\n                [`${key}Error`]: ``\r\n            }\r\n        }\r\n        if (key === 'postalCode' && (value.toString().length < 4 || value.toString().length > 20)) {\r\n            valid = false;\r\n            tempRestaurantForm.postalCodeError = 'Should be between 5 to 20 character';\r\n        }\r\n        return [valid, tempRestaurantForm];\r\n    }\r\n\r\n    const handleDropdownChange = (e, value, type) => {\r\n        let tempRestaurantForm = { ...restaurantForm };\r\n        tempRestaurantForm.countryError = '';\r\n        if (type === 'country') {\r\n            tempRestaurantForm.phoneCountry = {\r\n                countryCode: value ? (value.code ? value.code : '') : ''\r\n            }\r\n            tempRestaurantForm.country = value;\r\n        }\r\n        let result = handleDropDownValidation(`${type}Id`, value, tempRestaurantForm, false)\r\n        tempRestaurantForm = result[1];\r\n        setRestaurantForm({\r\n            ...tempRestaurantForm\r\n        });\r\n    }\r\n\r\n    const restaurantFormValidation = (restaurant, submitValue) => {\r\n        let tempRestaurantForm = { ...restaurant };\r\n        let valid = true;\r\n        let tempValid = false;\r\n        let restaurantProps = Object.entries(restaurant);\r\n        restaurantProps.map(([key, value]) => {\r\n            let result = [false, tempRestaurantForm];\r\n            if (key === 'buffet' || key === 'bar' || key === 'dining' || key === 'petFriendly'\r\n                || key === 'outdoorSitting' || key === 'pureVeg' || key === 'phoneCountry' || key === 'cuisines') {\r\n                return [key, value];\r\n            }\r\n            if ((key.includes('Error'))) {\r\n                return [key, value];\r\n            }\r\n            if (key === 'address2') {\r\n                if (value !== '') {\r\n                    result = handleTextValidation(key, value, tempRestaurantForm, submitValue, tempRestaurantForm.phoneCountry);\r\n                } else {\r\n                    return [key, value];\r\n                }\r\n            }\r\n            else if (key === 'name' || key === 'address1' || key === 'province' || key === 'description'\r\n                || key === 'city' || key === 'email' || key === 'phoneNumber' || key === 'state') {\r\n                result = handleTextValidation(key, value, tempRestaurantForm, submitValue, tempRestaurantForm.phoneCountry);\r\n            } else if (key === 'country') {\r\n                result = handleDropDownValidation(key, value, tempRestaurantForm, submitValue);\r\n            } else {\r\n                result = handleNumericValidation(key, value, tempRestaurantForm, submitValue);\r\n            }\r\n            tempValid = result[0];\r\n            tempRestaurantForm = result[1];\r\n            if (valid && !tempValid) {\r\n                valid = tempValid;\r\n            }\r\n            return [key, value];\r\n        });\r\n        setRestaurantForm({ ...tempRestaurantForm });\r\n        return valid;\r\n    }\r\n\r\n    const handleSubmitRestaurantForm = () => {\r\n        let valid = restaurantFormValidation(restaurantForm, true);\r\n        console.log(\"valid or not\", valid, restaurantForm, props)\r\n        if (valid) {\r\n            let result = false;\r\n            let countryCode = restaurantForm.phoneCountry.dialCode;\r\n            let phNumber = restaurantForm.phoneNumber;\r\n            let newPhNumber;\r\n            phNumber = phNumber.replace(/[^0-9]/g, '');\r\n            phNumber = phNumber.replace(countryCode, '');\r\n            newPhNumber = `+${countryCode}-${phNumber}`;\r\n            restaurantForm.phoneNumber = newPhNumber;\r\n            if (props.editRestaurant) {\r\n                result = props.updateRestaurant(restaurantForm, props.handleNotification);\r\n            } else {\r\n                result = props.addRestaurant(restaurantForm, props.handleNotification);\r\n            }\r\n            if (result === MessageType.success) {\r\n                props.modalClose();\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (props.selectedRestaurant && props.selectedRestaurant.id) {\r\n            console.log(\"selected restaurant\", props.selectedRestaurant)\r\n            let restaurant = props.selectedRestaurant;\r\n            if (restaurant.phoneCountry) {\r\n                let countryCode = restaurant.phoneCountry.dialCode;\r\n                let phNumber = restaurant.phoneNumber;\r\n                let newPhNumber;\r\n                phNumber = phNumber.replace(/[^0-9]/g, '');\r\n                phNumber = phNumber.replace(countryCode, '');\r\n                newPhNumber = `+${countryCode}-${phNumber}`;\r\n                restaurant.phoneNumber = newPhNumber;\r\n            }\r\n            setRestaurantForm({ ...restaurant });\r\n        }\r\n    }, [props.editRestaurant]);\r\n    console.log(\"props in moda\", props, restaurantForm)\r\n    ModalCloseHelper(wrapperRef, modalRef, closeModal);\r\n    return (\r\n        <div className=\"customerModalFormContainer\" ref={wrapperRef} style={{ display: showModal ? 'block' : 'none' }}>\r\n            <Grid container spacing={3} backdrop=\"true\" ref={modalRef} keyboard=\"true\" className=\"customerInfoContainer customerModalForm\">\r\n                <Grid item xs={11} className=\"customerModalHeader\">\r\n                    <h4>{`${props.editRestaurant ? 'Update' : 'Add'}`} Restaurant</h4>\r\n                </Grid>\r\n                <Grid item xs={1} className=\"customerModalHeader customerModalFormCancel\">\r\n                    <CloseIcon onClick={closeModal} />\r\n                </Grid>\r\n                <Divider className=\"headerDivider\" />\r\n                <Grid item xs={12} className=\"customerInfoHeader customerModalSubHeader\">\r\n                    Identification\r\n                </Grid>\r\n                <Grid item xs={12} className=\"customerInfoEditForm customerModalInfoEdit\">\r\n                    <div className=\"customerAddressFormBox customerModalFormBox customerName\">\r\n                        <label >Restaurant Name</label>\r\n                        <TextField\r\n                            value={restaurantForm.name}\r\n                            onChange={e => handleInputChange(e, 'name')}\r\n                            error={restaurantForm.nameError ? true : false}\r\n                            helperText={restaurantForm.nameError}\r\n                            variant=\"outlined\"\r\n                            placeholder=\"Restaurant Name\"\r\n                            defaultValue=\"\"\r\n                            InputLabelProps={{\r\n                                shrink: false,\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"customerAddressFormBox productInventoryForm partnerForm\">\r\n                        <label >Cuisines</label>\r\n                        <Autocomplete\r\n                            multiple\r\n                            id=\"checkboxes-tags-demo\"\r\n                            options={props.cuisines}\r\n                            value={[...restaurantForm.cuisines]}\r\n                            onChange={(e, value) => handleCusisineSelectChange(e, value)}\r\n                            clearOnBlur={true}\r\n                            getOptionLabel={(cuisine) => cuisine.cuisineName ? cuisine.cuisineName : ''}\r\n                            renderOption={(option, { selected }) => (\r\n                                <React.Fragment>\r\n                                    <Checkbox\r\n                                        icon={icon}\r\n                                        checkedIcon={checkedIcon}\r\n                                        style={{ marginRight: 8 }}\r\n                                        checked={selected}\r\n                                    />\r\n                                    {option.cuisineName}\r\n                                </React.Fragment>\r\n                            )}\r\n                            style={{ width: 400 }}\r\n                            renderInput={(params) => (\r\n                                <TextField\r\n                                    error={restaurantForm.cuisineIdsError ? true : false}\r\n                                    helperText={restaurantForm.cuisineIdsError}\r\n                                    {...params}\r\n                                    variant=\"outlined\"\r\n                                    placeholder=\"Cuisines\"\r\n                                    InputLabelProps={{\r\n                                        shrink: false,\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </div>\r\n                    <div className=\"customerAddressFormBox customerModalFormBox\">\r\n                        <label >Rating</label>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            type='number'\r\n                            placeholder=\"Rating\"\r\n                            onChange={(e) => handleNumericInputChange(e, 'rating')}\r\n                            value={restaurantForm.rating}\r\n                            error={restaurantForm.ratingError ? true : false}\r\n                            helperText={restaurantForm.ratingError}\r\n                            InputLabelProps={{\r\n                                shrink: false,\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"customerAddressFormBox customerModalFormBox\">\r\n                        <label >Average Cost For 2</label>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            type='number'\r\n                            placeholder=\"Average cost\"\r\n                            onChange={(e) => handleNumericInputChange(e, 'averageCost')}\r\n                            value={restaurantForm.averageCost}\r\n                            error={restaurantForm.averageCostError ? true : false}\r\n                            helperText={restaurantForm.averageCostError}\r\n                            InputLabelProps={{\r\n                                shrink: false,\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} className=\"customerInfoEditForm\">\r\n                    <div className=\"customerAddressFormBox customerModalFormBox customerDescription\">\r\n                        <label >Description</label>\r\n                        <TextareaAutosize\r\n                            aria-label=\"empty textarea\"\r\n                            placeholder=\"Description\"\r\n                            value={restaurantForm.description}\r\n                            onChange={(e) => handleInputChange(e, 'description')}\r\n                        />\r\n                        {restaurantForm.descriptionError ? <p className=\"error\">{restaurantForm.descriptionError}</p> : ''}\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} className=\"customerInfoEditForm\">\r\n                    <div className=\"userModalFormCheckBox\">\r\n                        <Checkbox\r\n                            onChange={e => handleCheckboxChange(e, 'bar')}\r\n                            checked={restaurantForm.bar}\r\n                            icon={<CheckBoxOutlineBlankIcon />}\r\n                            checkedIcon={<CheckBoxIcon />}\r\n                            name=\"checked\" />\r\n                        <label>Bar</label>\r\n                    </div>\r\n                    <div className=\"userModalFormCheckBox\">\r\n                        <Checkbox\r\n                            onChange={e => handleCheckboxChange(e, 'buffet')}\r\n                            checked={restaurantForm.buffet}\r\n                            icon={<CheckBoxOutlineBlankIcon />}\r\n                            checkedIcon={<CheckBoxIcon />}\r\n                            name=\"checked\" />\r\n                        <label>Buffet</label>\r\n                    </div>\r\n                    <div className=\"userModalFormCheckBox\">\r\n                        <Checkbox\r\n                            onChange={e => handleCheckboxChange(e, 'dining')}\r\n                            checked={restaurantForm.dining}\r\n                            icon={<CheckBoxOutlineBlankIcon />}\r\n                            checkedIcon={<CheckBoxIcon />}\r\n                            name=\"checked\" />\r\n                        <label>Dining</label>\r\n                    </div>\r\n                    {/* <div className=\"userModalFormCheckBox\">\r\n                        <Checkbox\r\n                            onChange={e => handleCheckboxChange(e, 'cuisine')}\r\n                            checked={restaurantForm.cuisine}\r\n                            icon={<CheckBoxOutlineBlankIcon />}\r\n                            checkedIcon={<CheckBoxIcon />}\r\n                            name=\"checked\" />\r\n                        <label>Cuisine</label>\r\n                    </div> */}\r\n                    <div className=\"userModalFormCheckBox\">\r\n                        <Checkbox\r\n                            onChange={e => handleCheckboxChange(e, 'pureVeg')}\r\n                            checked={restaurantForm.pureVeg}\r\n                            icon={<CheckBoxOutlineBlankIcon />}\r\n                            checkedIcon={<CheckBoxIcon />}\r\n                            name=\"checked\" />\r\n                        <label>Pure Veg</label>\r\n                    </div>\r\n                    <div className=\"userModalFormCheckBox\">\r\n                        <Checkbox\r\n                            onChange={e => handleCheckboxChange(e, 'petFriendly')}\r\n                            checked={restaurantForm.petFriendly}\r\n                            icon={<CheckBoxOutlineBlankIcon />}\r\n                            checkedIcon={<CheckBoxIcon />}\r\n                            name=\"checked\" />\r\n                        <label>Pet Friendly</label>\r\n                    </div>\r\n                    <div className=\"userModalFormCheckBox\">\r\n                        <Checkbox\r\n                            onChange={e => handleCheckboxChange(e, 'outdoorSitting')}\r\n                            checked={restaurantForm.outdoorSitting}\r\n                            icon={<CheckBoxOutlineBlankIcon />}\r\n                            checkedIcon={<CheckBoxIcon />}\r\n                            name=\"checked\" />\r\n                        <label>Outdoor Sitting</label>\r\n                    </div>\r\n                </Grid>\r\n                <Divider className=\"generalDivider\" />\r\n                <Grid item xs={12} className=\"customerInfoHeader customerModalSubHeader\">\r\n                    Address\r\n                </Grid>\r\n                <Grid item xs={12} className=\"customerInfoEditForm\">\r\n                    <div className=\"customerAddressFormBox customerModalFormBox customerFormAddress1\">\r\n                        <label >Address 1</label>\r\n                        <TextField\r\n                            onChange={(e) => handleInputChange(e, 'address1')}\r\n                            value={restaurantForm.address1}\r\n                            error={restaurantForm.address1Error ? true : false}\r\n                            helperText={restaurantForm.address1Error}\r\n                            type=\"text\"\r\n                            variant=\"outlined\"\r\n                            InputLabelProps={{\r\n                                shrink: false,\r\n                            }}\r\n                            placeholder=\"Address 1\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"customerAddressFormBox customerModalFormBox customerFormAddress1\">\r\n                        <label >Address 2</label>\r\n                        <TextField\r\n                            onChange={(e) => handleInputChange(e, 'address2')}\r\n                            value={restaurantForm.address2}\r\n                            type=\"text\"\r\n                            error={restaurantForm.address2Error ? true : false}\r\n                            helperText={restaurantForm.address2Error}\r\n                            variant=\"outlined\"\r\n                            InputLabelProps={{\r\n                                shrink: false,\r\n                            }}\r\n                            placeholder=\"Address 2\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"customerAddressFormBox country customerModalFormBox\">\r\n                        <label >Country</label>\r\n                        <Autocomplete\r\n                            clearOnBlur={true}\r\n                            options={props.countries}\r\n                            getOptionLabel={(option) => option.label ? option.label : ''}\r\n                            onChange={(e, value) => handleDropdownChange(e, value, 'country')}\r\n                            value={restaurantForm.country}\r\n                            renderInput={(params) => (\r\n                                <TextField\r\n                                    {...params}\r\n                                    placeholder=\"Country\"\r\n                                    error={restaurantForm.countryError ? true : false}\r\n                                    helperText={restaurantForm.countryError}\r\n                                    variant=\"outlined\"\r\n                                    InputLabelProps={{\r\n                                        shrink: false,\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </div>\r\n                    <div className=\"customerAddressFormBox customerModalFormBox customerFormAddress1\">\r\n                        <label >State/Province</label>\r\n                        <TextField\r\n                            onChange={(e) => handleInputChange(e, 'state')}\r\n                            value={restaurantForm.state}\r\n                            error={restaurantForm.stateError ? true : false}\r\n                            helperText={restaurantForm.stateError}\r\n                            type=\"text\"\r\n                            variant=\"outlined\"\r\n                            InputLabelProps={{\r\n                                shrink: false,\r\n                            }}\r\n                            placeholder=\"State/Province\"\r\n                        />\r\n                    </div>\r\n\r\n                </Grid>\r\n                <Grid item xs={12} className=\"customerModalFormAddressSection\">\r\n                    <div className=\"customerAddressFormBox customerModalFormBox city\">\r\n                        <label >City</label>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            placeholder=\"City\"\r\n                            onChange={(e) => handleInputChange(e, 'city')}\r\n                            value={restaurantForm.city}\r\n                            error={restaurantForm.cityError ? true : false}\r\n                            helperText={restaurantForm.cityError}\r\n                            defaultValue=\"\"\r\n                            InputLabelProps={{\r\n                                shrink: false,\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"customerAddressFormBox customerModalFormBox\">\r\n                        <label >Postal Code</label>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            placeholder=\"Postal Code\"\r\n                            onChange={(e) => handleNumericInputChange(e, 'postalCode')}\r\n                            value={restaurantForm.postalCode}\r\n                            error={restaurantForm.postalCodeError ? true : false}\r\n                            helperText={restaurantForm.postalCodeError}\r\n                            InputLabelProps={{\r\n                                shrink: false,\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n                <Divider className=\"generalDivider\" />\r\n                <Grid item xs={12} className=\"customerInfoHeader customerModalSubHeader\">\r\n                    Contact\r\n                </Grid>\r\n                <Grid item xs={6} className=\"customerInfoEditForm contactForm\">\r\n                    <div className=\"customerAddressFormBox customerModalFormBox customerFormAddress1\">\r\n                        <label >Email Address</label>\r\n                        <TextField\r\n                            onChange={(e) => handleInputChange(e, 'email')}\r\n                            value={restaurantForm.email}\r\n                            error={restaurantForm.emailError ? true : false}\r\n                            helperText={restaurantForm.emailError}\r\n                            type=\"text\"\r\n                            variant=\"outlined\"\r\n                            InputLabelProps={{\r\n                                shrink: false,\r\n                            }}\r\n                            placeholder=\"Email Address\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"customerAddressFormBox customerModalFormBox customerFormAddress1 phoneNumber\">\r\n                        <label >Phone Number</label>\r\n                        <AdvancePhoneNumber\r\n                            defaultCountry={restaurantForm.phoneCountry}\r\n                            phoneNumber={restaurantForm.phoneNumber}\r\n                            onChange={(number, country) => handleInputChange(number, 'phoneNumber', country)}\r\n                        />\r\n                        {restaurantForm.phoneNumberError ? <p className=\"phoneError error\">{restaurantForm.phoneNumberError}</p> : ''}\r\n                    </div>\r\n                </Grid>\r\n                <div className=\"customerAddressFormButton customerModalFormButton\">\r\n                    <Grid item xs={6} className=\"customerAddressFormBox cancelButton\">\r\n                        <Button variant=\"outlined\" onClick={props.modalClose}>\r\n                            Cancel\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item xs={6} className=\"customerAddressFormBox saveButton\">\r\n                        <Button variant=\"contained\" onClick={handleSubmitRestaurantForm} >\r\n                            Save\r\n                        </Button>\r\n                    </Grid>\r\n                </div>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RestaurantModalForm;","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\sharedComponent\\AdvancePhoneNumber.js",[],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\sharedComponent\\ModalCloseHelper.js",[],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\containers\\restaurantModalContainer.js",[],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\action\\index.js",[],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\action\\restaurant.action.js",["171","172","173","174","175","176"],"import { REDUCER } from '../constants/reducerConstants';\r\nimport { Message, MessageType } from '../constants/notificationMessages';\r\nimport { store } from '../store/index';\r\n\r\nconst addRestaurant = (restaurant, callback) => {\r\n    return (dispatch) => {\r\n        try {\r\n            let restaurantList = store.getState().RestaurantReducer.restaurantList;\r\n            restaurant.id = Date.now();\r\n            restaurant.menuItems = [];\r\n            restaurantList.push(restaurant);\r\n            callback(false, MessageType.success, Message.addRestaurant);\r\n            dispatch({\r\n                type: REDUCER.ADD_RESTAURANT,\r\n                restaurantList: [...restaurantList]\r\n            })\r\n            return MessageType.success;\r\n        } catch {\r\n            callback(false, MessageType.error, Message.addRestaurantFail);\r\n        }\r\n    }\r\n}\r\n\r\nconst updateRestaurant = (restaurant, callback) => {\r\n    return (dispatch) => {\r\n        try {\r\n            let restaurantList = store.getState().RestaurantReducer.restaurantList;\r\n            let newlist = restaurantList.map(value => {\r\n                if (value.id == restaurant.id) {\r\n                    return { ...restaurant };\r\n                }\r\n                return { ...value };\r\n            })\r\n            restaurantList[restaurant.id - 1] = { ...newlist };\r\n            callback(false, MessageType.success, Message.updateRestaurant);\r\n            dispatch({\r\n                type: REDUCER.UPDATE_RESTAURANT,\r\n                restaurantList: [...restaurantList]\r\n            })\r\n            return MessageType.success;\r\n        } catch {\r\n            callback(false, MessageType.error, Message.updateRestaurantFail);\r\n        }\r\n    }\r\n}\r\n\r\nconst addMenuItem = (menuItem, restaurantId, callback) => {\r\n    return dispatch => {\r\n        try {\r\n            let restaurantList = store.getState().RestaurantReducer.restaurantList;\r\n            let newlist = restaurantList.map(value => {\r\n                if (value.id == restaurantId) {\r\n                    let menuItems = value.menuItems;\r\n                    menuItem.id = Date.now();\r\n                    menuItems.push(menuItem);\r\n                    value.menuItems = [...menuItems];\r\n                    return { ...value };\r\n                }\r\n                return { ...value };\r\n            })\r\n\r\n            callback(false, MessageType.success, Message.addMenuItem);\r\n            dispatch({\r\n                type: REDUCER.UPDATE_RESTAURANT,\r\n                restaurantList: [...newlist]\r\n            })\r\n            return MessageType.success;\r\n        }\r\n        catch (e) {\r\n            console.log(\"e\", e)\r\n            callback(false, MessageType.error, Message.addMenuItemFail);\r\n        }\r\n    }\r\n}\r\n\r\nconst updateMenuItem = (menuItem, restaurantId, callback) => {\r\n    return dispatch => {\r\n        try {\r\n            let restaurantList = store.getState().RestaurantReducer.restaurantList;\r\n            let newlist = restaurantList.map(value => {\r\n                if (value.id == restaurantId) {\r\n                    let newItem = value.menuItems.map(item => {\r\n                        if (item.id == menuItem.id) {\r\n                            return { ...menuItem };\r\n                        }\r\n                        return { ...item };\r\n                    })\r\n                    value.menuItems = [...newItem];\r\n                    return { ...value };\r\n                }\r\n                return { ...value };\r\n            })\r\n            callback(false, MessageType.success, Message.updateMenuItem);\r\n            dispatch({\r\n                type: REDUCER.UPDATE_RESTAURANT,\r\n                restaurantList: [...newlist]\r\n            })\r\n            return MessageType.success;\r\n        }\r\n        catch (e) {\r\n            console.log(\"e\", e)\r\n            callback(false, MessageType.error, Message.updateMenuItemFail);\r\n        }\r\n    }\r\n}\r\n\r\nconst deleteMenuItem = (menuItem, restaurantId, callback) => {\r\n    return dispatch => {\r\n        try {\r\n            let restaurantList = store.getState().RestaurantReducer.restaurantList;\r\n            let newlist = restaurantList.map(value => {\r\n                if (value.id == restaurantId) {\r\n                    let index;\r\n                    let newItem = value.menuItems.map((item, key) => {\r\n                        console.log(\"key\", key)\r\n                        if (item.id == menuItem.id) {\r\n                            index = key\r\n                            return { ...item };\r\n                        }\r\n                        return { ...item };\r\n                    })\r\n                    console.log(\"index\", index)\r\n                    if (index >= 0) {\r\n                        newItem.splice(index, 1);\r\n                    }\r\n                    value.menuItems = [...newItem];\r\n                    return { ...value };\r\n                }\r\n                return { ...value };\r\n            })\r\n            callback(false, MessageType.success, Message.deletedMenuItem);\r\n            dispatch({\r\n                type: REDUCER.UPDATE_RESTAURANT,\r\n                restaurantList: [...newlist]\r\n            })\r\n            return MessageType.success;\r\n        }\r\n        catch {\r\n            callback(false, MessageType.error, Message.deletedMenuItemFail);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst Restaurant = {\r\n    addRestaurant,\r\n    updateRestaurant,\r\n    addMenuItem,\r\n    updateMenuItem,\r\n    deleteMenuItem\r\n}\r\n\r\nexport default Restaurant;","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\constants\\notificationMessages.js",[],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\sharedComponent\\Snackbar.js",[],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\containers\\restaurantListContainer.js",["177"],"import { connect } from 'react-redux';\r\nimport Action from '../action/index';\r\nimport RestaurantList from '../components/restaurant/RestaurantList';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        restaurantList: state.RestaurantReducer.restaurantList\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RestaurantList);","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\containers\\restaurantDetailsContainer.js",[],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\helpers\\sharedMethod.js",["178"],"export const displayCuisine = (cuisines) => {\r\n    let cuisineList = [];\r\n    cuisines && cuisines.map(cuisine => {\r\n        cuisineList.push(cuisine.cuisineName);\r\n    })\r\n    return cuisineList.join(', ');\r\n}\r\n\r\nexport const firstLetterUppercase = (word) => {\r\n    return word && word.charAt(0).toUpperCase() + word.slice(1);\r\n}\r\n\r\nexport const displayType = (restaurant) => {\r\n    let restaurantProps = Object.entries(restaurant);\r\n    let typeValues = [];\r\n    restaurantProps.map(([key, value]) => {\r\n        if (['bar', 'dining', 'outdoorSitting', 'petFriendly', 'buffet', 'pureVeg'].includes(key) && value) {\r\n            typeValues.push(firstLetterUppercase(key));\r\n        }\r\n        return [key, value];\r\n    })\r\n    return typeValues.join(', ')\r\n}\r\n","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\restaurant\\restaurantDetails\\RestaurantDetailsView.js",["179"],"import React from 'react';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport LocalAtmIcon from '@material-ui/icons/LocalAtm';\r\nimport { displayCuisine, displayType, firstLetterUppercase } from '../../../helpers/sharedMethod';\r\nimport LocalDiningIcon from '@material-ui/icons/LocalDining';\r\nimport { Button, Grid } from '@material-ui/core';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ContactSupportIcon from '@material-ui/icons/ContactSupport';\r\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\r\nimport RestaurantIcon from '@material-ui/icons/Restaurant';\r\nimport StarRateIcon from '@material-ui/icons/StarRate';\r\n\r\nconst RestaurantDetailsView = ({ restaurant }) => {\r\n    return (\r\n        <>\r\n            <Grid item xs={9} className=\"headerName\">\r\n                <p >{firstLetterUppercase(restaurant.name)}</p>\r\n            </Grid>\r\n            <Grid item xs={2} className=\"headerRating\">\r\n                <Button>{restaurant.rating}<StarRateIcon /></Button>\r\n            </Grid>\r\n            <Grid item xs={12} className=\"cuisines\">\r\n                <LocalAtmIcon />\r\n                <p >&#8377; {restaurant.averageCost} for 2</p>\r\n                <div className=\"verticalLine\"></div>\r\n                <p>{displayCuisine(restaurant.cuisines)}</p>\r\n            </Grid>\r\n            <Grid item xs={12} className=\"location\">\r\n                <LocationOnIcon />\r\n                <p>{firstLetterUppercase(restaurant.address1)}</p>\r\n                <div className=\"verticalLine\"></div>\r\n                {restaurant.address2 ?\r\n                    <><p>{restaurant.address2}</p>\r\n                        <div className=\"verticalLine\"></div></>\r\n                    : ''}\r\n                <p>{firstLetterUppercase(restaurant.city)}</p>\r\n                <div className=\"verticalLine\"></div>\r\n                <p>{firstLetterUppercase(restaurant.state)}</p>\r\n                <div className=\"verticalLine\"></div>\r\n                <p>{restaurant.country && firstLetterUppercase(restaurant.country.label)}</p>\r\n            </Grid>\r\n            <Grid item xs={12} className=\"contact location\">\r\n                <ContactSupportIcon />\r\n                <p>{restaurant.phoneNumber}</p>\r\n                <div className=\"verticalLine\"></div>\r\n                <p>{restaurant.email}</p>\r\n            </Grid>\r\n            <Divider className=\"headerDivider\" />\r\n            <Grid item xs={12} className=\"subHeader\">\r\n                <p>About</p>\r\n            </Grid>\r\n            <Grid item xs={12} className=\"about\">\r\n                <p>{restaurant.description}</p>\r\n            </Grid>\r\n            <Grid item xs={12} className=\"details\">\r\n                <RestaurantIcon />\r\n                <div className='subDetails'>\r\n                    <p>Cuisines</p>\r\n                    <span>{displayCuisine(restaurant.cuisines)}</span>\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={12} className=\"details\">\r\n                <LocalDiningIcon />\r\n                <div className='subDetails'>\r\n                    <p>Type</p>\r\n                    <span>{displayType(restaurant)}</span>\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={12} className=\"details\">\r\n                <LocalAtmIcon />\r\n                <div className='subDetails'>\r\n                    <p>Average Cost</p>\r\n                    <span>&#8377; {restaurant.averageCost} for 2</span>\r\n                </div>\r\n            </Grid>\r\n            {/* <Grid item xs={12} className=\"details\">\r\n                <ShowChartIcon />\r\n                <div className='subDetails'>\r\n                    <p>Best Selling Item</p>\r\n                    <span>{displayBestSellingItem(restaurant)}</span>\r\n                </div>\r\n            </Grid> */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RestaurantDetailsView;","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\restaurant\\restaurantDetails\\RestaurantDetailsAdmin.js",["180","181","182","183","184"],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\restaurant\\restaurantDetails\\MenuItemForm.js",[],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\containers\\menuItemFormContainer.js",["185"],"import { connect } from 'react-redux';\r\nimport Action from '../action/index';\r\nimport MenuItemForm from '../components/restaurant/restaurantDetails/MenuItemForm';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        menuCategories: state.RestaurantReducer.menuCategories,\r\n        menuTypes: state.RestaurantReducer.menuTypes,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MenuItemForm);","C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\restaurant\\restaurantDetails\\MenuItemListView.js",["186","187","188"],"C:\\Users\\surya.mohanty\\Desktop\\Restaurants\\restaurant-app\\src\\components\\restaurant\\restaurantPreview\\RestaurantPreview.js",["189","190","191"],{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","replacedBy":"195"},{"ruleId":"196","severity":1,"message":"197","line":1,"column":17,"nodeType":"198","messageId":"199","endLine":1,"endColumn":26},{"ruleId":"196","severity":1,"message":"200","line":7,"column":8,"nodeType":"198","messageId":"199","endLine":7,"endColumn":15},{"ruleId":"196","severity":1,"message":"201","line":11,"column":8,"nodeType":"198","messageId":"199","endLine":11,"endColumn":20},{"ruleId":"196","severity":1,"message":"202","line":4,"column":8,"nodeType":"198","messageId":"199","endLine":4,"endColumn":18},{"ruleId":"196","severity":1,"message":"203","line":5,"column":10,"nodeType":"198","messageId":"199","endLine":5,"endColumn":20},{"ruleId":"196","severity":1,"message":"204","line":6,"column":8,"nodeType":"198","messageId":"199","endLine":6,"endColumn":17},{"ruleId":"196","severity":1,"message":"205","line":19,"column":12,"nodeType":"198","messageId":"199","endLine":19,"endColumn":23},{"ruleId":"196","severity":1,"message":"206","line":19,"column":25,"nodeType":"198","messageId":"199","endLine":19,"endColumn":39},{"ruleId":"196","severity":1,"message":"207","line":21,"column":12,"nodeType":"198","messageId":"199","endLine":21,"endColumn":33},{"ruleId":"196","severity":1,"message":"208","line":21,"column":35,"nodeType":"198","messageId":"199","endLine":21,"endColumn":59},{"ruleId":"196","severity":1,"message":"209","line":75,"column":11,"nodeType":"198","messageId":"199","endLine":75,"endColumn":34},{"ruleId":"196","severity":1,"message":"210","line":3,"column":10,"nodeType":"198","messageId":"199","endLine":3,"endColumn":14},{"ruleId":"211","severity":1,"message":"212","line":44,"column":37,"nodeType":"213","messageId":"214","endLine":44,"endColumn":465},{"ruleId":"215","severity":1,"message":"216","line":328,"column":8,"nodeType":"217","endLine":328,"endColumn":30,"suggestions":"218"},{"ruleId":"219","severity":1,"message":"220","line":29,"column":30,"nodeType":"221","messageId":"214","endLine":29,"endColumn":32},{"ruleId":"219","severity":1,"message":"220","line":52,"column":30,"nodeType":"221","messageId":"214","endLine":52,"endColumn":32},{"ruleId":"219","severity":1,"message":"220","line":81,"column":30,"nodeType":"221","messageId":"214","endLine":81,"endColumn":32},{"ruleId":"219","severity":1,"message":"220","line":83,"column":37,"nodeType":"221","messageId":"214","endLine":83,"endColumn":39},{"ruleId":"219","severity":1,"message":"220","line":112,"column":30,"nodeType":"221","messageId":"214","endLine":112,"endColumn":32},{"ruleId":"219","severity":1,"message":"220","line":116,"column":37,"nodeType":"221","messageId":"214","endLine":116,"endColumn":39},{"ruleId":"196","severity":1,"message":"222","line":2,"column":8,"nodeType":"198","messageId":"199","endLine":2,"endColumn":14},{"ruleId":"223","severity":1,"message":"224","line":3,"column":38,"nodeType":"225","messageId":"226","endLine":3,"endColumn":40},{"ruleId":"196","severity":1,"message":"227","line":9,"column":8,"nodeType":"198","messageId":"199","endLine":9,"endColumn":21},{"ruleId":"196","severity":1,"message":"228","line":8,"column":10,"nodeType":"198","messageId":"199","endLine":8,"endColumn":18},{"ruleId":"196","severity":1,"message":"229","line":14,"column":10,"nodeType":"198","messageId":"199","endLine":14,"endColumn":16},{"ruleId":"196","severity":1,"message":"230","line":20,"column":12,"nodeType":"198","messageId":"199","endLine":20,"endColumn":20},{"ruleId":"219","severity":1,"message":"220","line":70,"column":64,"nodeType":"221","messageId":"214","endLine":70,"endColumn":66},{"ruleId":"215","severity":1,"message":"231","line":77,"column":8,"nodeType":"217","endLine":77,"endColumn":30,"suggestions":"232"},{"ruleId":"196","severity":1,"message":"222","line":2,"column":8,"nodeType":"198","messageId":"199","endLine":2,"endColumn":14},{"ruleId":"223","severity":1,"message":"233","line":29,"column":40,"nodeType":"225","messageId":"234","endLine":29,"endColumn":42},{"ruleId":"223","severity":1,"message":"224","line":31,"column":21,"nodeType":"235","messageId":"236","endLine":31,"endColumn":28},{"ruleId":"215","severity":1,"message":"237","line":57,"column":8,"nodeType":"217","endLine":57,"endColumn":19,"suggestions":"238"},{"ruleId":"196","severity":1,"message":"239","line":15,"column":24,"nodeType":"198","messageId":"199","endLine":15,"endColumn":37},{"ruleId":"223","severity":1,"message":"233","line":59,"column":51,"nodeType":"225","messageId":"234","endLine":59,"endColumn":53},{"ruleId":"223","severity":1,"message":"224","line":61,"column":21,"nodeType":"235","messageId":"236","endLine":61,"endColumn":28},"no-native-reassign",["240"],"no-negated-in-lhs",["241"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'history' is defined but never used.","'PageNotFound' is defined but never used.","'SearchIcon' is defined but never used.","'IconButton' is defined but never used.","'InputBase' is defined but never used.","'searchInput' is assigned a value but never used.","'setSearchInput' is assigned a value but never used.","'displayRestaurantList' is assigned a value but never used.","'setDisplayRestaurantList' is assigned a value but never used.","'handleTableSearchResult' is assigned a value but never used.","'Link' is defined but never used.","no-control-regex","Unexpected control character(s) in regular expression: \\x01, \\x08, \\x0b, \\x0c, \\x0e, \\x1f, \\x01, \\x09, \\x0b, \\x0c, \\x0e, \\x01, \\x08, \\x0b, \\x0c, \\x0e, \\x1f, \\x01, \\x09, \\x0b, \\x0c, \\x0e.","Literal","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.selectedRestaurant'. Either include it or remove the dependency array.","ArrayExpression",["242"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'Action' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'ShowChartIcon' is defined but never used.","'Redirect' is defined but never used.","'ROUTES' is defined but never used.","'redirect' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.match.params.restaurantId'. Either include it or remove the dependency array.",["243"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","ReturnStatement","expectedReturnValue","React Hook useEffect has a missing dependency: 'displayMenuItemsCards'. Either include it or remove the dependency array.",["244"],"'setRestaurant' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},"Update the dependencies array to be: [props.editRestaurant, props.selectedRestaurant]",{"range":"251","text":"252"},"Update the dependencies array to be: [props.match.params.restaurantId, props.restaurantList]",{"range":"253","text":"254"},"Update the dependencies array to be: [displayMenuItemsCards, menuItems]",{"range":"255","text":"256"},[13010,13032],"[props.editRestaurant, props.selectedRestaurant]",[2707,2729],"[props.match.params.restaurantId, props.restaurantList]",[2482,2493],"[displayMenuItemsCards, menuItems]"]